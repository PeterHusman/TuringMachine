#UTM: Universally painful
#input: 'ee ; D A D D C R D A A ; D A A D D R D A A A ; D A A D C D R D A A A ; D A A A D D C C R D A A A A ; D A A A A D D R D A :: D A AhD C D'
input: 'ee ; D A D C D R D A A ; D A D C C D R D A A A A ; D A A D C D C R D A A ; D A A D C C D C C R D A A ; D A A D D C L D A A A ; D A A A D C D C L D A A A ; D A A A D C C D C C L D A A A ; D A A A D D R D A :: D A DhD C D C D C D C C D C D C'
blank: ' '
start state: instrStart
table:
  instrStart:
    [e,' ',D,C,A,R,L]: R #CARL
    ';': {R: writeZ}
    ':': {R: goToGetState}
  writeZ:
    'D': {R: writeZReally}
    ' ': R
  writeZReally:
    ' ': {write: 'z', R: instrStart}
  goToGetState:
    ':': R
    ' ': {R: writeY}
  writeY:
    'D': R
    ' ': {write: 'y', R: checkStateA}
  checkStateA:
    'A': {L: checkZForA}
    ['D','h']: {L: checkZForD}
  checkZForA:
    [';',':',' ',y,D,C,A,R,L]: L
    'z': {write: ' ', R: checkZForA2}
    'e': {R: advanceY}
  checkZForA2:
    'A': {R: writeZForA}
    'D': {L: checkZForA}
  writeZForA:
    ' ': {write: 'z', L: checkZForA}
  advanceY:
    [';',' ',y,D,C,A,R,L,z,e]: R
    ':': {R: advanceY2}
  advanceY2:
    [':',D,A,' ']: R
    'y': {write: ' ', R: writeNewY}
  writeNewY:
    'A': R
    'h': {L: checkZForD}
    ' ': {write: 'y', R: checkStateA}
   
  checkZForD:
    [';',':',' ',y,D,C,A,R,L]: L
    'z': {write: ' ', R: checkZForD2}
    'e': {R: advanceYStateFound}
  checkZForD2:
    'D': {R: writeZForD}
    'A': {L: checkZForD}
  writeZForD:
    ' ': {write: 'z', L: checkZForD}
  advanceYStateFound:
    [';',' ',y,D,C,A,R,L,z,e]: R
    ':': {R: advanceYStateFound2}
  advanceYStateFound2:
    [':',D,A,' ']: R
    'y': {write: ' ', R: writeNewYStateFound}
    'h': {R: filterBySymbolStart}
  writeNewYStateFound:
    'A': R
    'D': {R: filterBySymbol}
    #' ': {write: 'y', R: filterBySymbol}
    'h': {R: filterBySymbolStart}
  filterBySymbol:
    [' ','D','A','C']: R
    'h': {R: filterBySymbolStart}
  filterBySymbolStart:
    'D': R
    ' ': {write: 'y', R: checkSymbol}
  checkSymbol:
    ' ': {write: 'D', L: checkZForDSymbol}
    'C': {L: checkZForC}
    'D': {L: checkZForDSymbol}
  checkZForC:
    [';',':',' ',h,y,D,C,A,R,L]: L
    'z': {write: ' ', R: checkZForC2}
    'e': {R: advanceYSymbol}
  checkZForC2:
    'C': {R: writeZForC}
    'D': {L: checkZForC}
  writeZForC:
    ' ': {write: 'z', L: checkZForC}
  checkZForDSymbol:
    [';',':',' ',h,y,D,C,A,R,L]: L
    'z': {write: ' ', R: checkZForDSymbol2}
    'e': {R: advanceYInstrFound}
  checkZForDSymbol2:
    'D': {R: writeZForDSymbol}
    ['A','C']: {L: checkZForDSymbol}
  writeZForDSymbol:
    ' ': {write: 'z', L: checkZForDSymbol}
  advanceYSymbol:
    [';',' ',y,D,C,A,R,L,z,e]: R
    ':': {R: advanceYSymbol2}
  advanceYSymbol2:
    [':',h,D,C,A,' ']: R
    'y': {write: ' ', R: writeNewYSymbol}
  writeNewYSymbol:
    ['A','C','D']: R
    ' ': {write: 'y', R: checkSymbol}
  advanceYInstrFound:
    [';',' ',y,D,C,A,R,L,e]: R
    'z': {R: findNewStateStart}
    ':': {write: ' ', L: finalEraseUntilE}
  findNewStateStart:
    [';',' ',y,D,C,R,L,e]: R
    'A': {R: writeNewStateSymbol}
  writeNewStateSymbol:
    ' ': {write: 'n', R: addOneCharToState}
  addOneCharToState:
    [';',' ',y,D,A,C,R,L,e]: R
    ':': {R: colonRegionOneAddState}
  colonRegionOneAddState:
    [';',h,':',y,D,A,C,R,L,e]: R
    ' ': {R: colonRegionOneAddStatePostColonPostSpace}
  colonRegionOneAddStatePostColonPostSpace:
    [';',h,y,D,A,C,R,L,e]: {R: colonRegionOneAddStatePostColon}
    ' ': {write: ':', R: addNewColonRegion}
    ':': {R: colonRegionTwoAddState}
  colonRegionOneAddStatePostColon:
    [';',h,y,D,A,C,R,L,e]: R
    ' ': {R: colonRegionOneAddStatePostColonPostSpace}
    #':': {R: colonRegionOneAddStatePostColonPostSpace}
  addNewColonRegion:
    ' ': {write: ':', R: addNewColonRegion2}
  addNewColonRegion2:
    ' ': {R: addNewColonRegion3}
  addNewColonRegion3:
    ' ': {write: 'D', R: colonRegionTwoAddState}
  colonRegionTwoAddState:
    [';',':',h,y,D,A,C,R,L,e]: R
    ' ': {R: colonRegionTwoAddStatePostSpace}
  colonRegionTwoAddStatePostSpace:
    ' ': {write: 'A', L: findN}
    [';',h,y,D,A,C,R,L,e]: {R: colonRegionTwoAddState}
  findN:
    [';',':',' ',h,y,D,A,C,R,L,e]: L
    'n': {write: ' ', R: moveN}
  moveN:
    [';',' ']: {R: goToColonAreasForCopy}
    'A': {R: moveNReally}
  moveNReally:
    ' ': {write: 'n', R: addOneCharToState}
  goToColonAreasForCopy:
    [';',' ',h,y,D,A,C,R,L,e]: R
    ':': {R: identifyStateStart}
  identifyStateStart:
    [' ',':']: R
    'D': {R: identifyStateEnd}
  identifyStateEnd:
    [' ','A']: R
    'h': {L: addBlankLeftStart}
    'D': {write: 'm', R: copyD}
  addBlankLeftStart:
    [' ','A']: {write: 'm', R: copyD}
  copyD:
    [' ','C','D','h','y','A','m']: R
    ':': copyDFindSpot
  copyDFindSpot:
    [':','D','C','A','h','y']: R
    ' ': {R: copyDFindSpotPostSpace}
  copyDFindSpotPostSpace:
    [':','D','C','A','h']: {R: copyDFindSpot}
    ' ': {write: 'D', L: getNextToCopy}
  copyC:
    [' ','C','D','h','y','A','m']: R
    ':': copyCFindSpot
  copyCFindSpot:
    [':','D','C','A','h','y']: R
    ' ': {R: copyCFindSpotPostSpace}
  copyCFindSpotPostSpace:
    [':','D','C','A','h']: {R: copyCFindSpot}
    ' ': {write: 'C', L: getNextToCopy}
  getNextToCopy:
    [':','D','C','A','h','y',' ']: L
    'm': {R: scanForCopy}
  scanForCopy:
    [' ','y']: R
    'D': {write: 'm', R: copyD}
    'C': {write: 'm', R: copyC}
    'h': {L: readValueToCopy}
    ':': {L: getDir}
  readValueToCopy:
    [':','D','C','A','h','y','m',' ',';','R','L']: L
    'z': {L: scanForLongCopy}
  scanForLongCopy:
    'D': {R: goToColonCopyDAndMoveZ}
    'C': {R: goToColonCopyCAndMoveZ}
    'R': {R: clearZMoveR}
    'L': {R: clearZMoveL}
  goToColonCopyDAndMoveZ:
    ['D','C','A','h','y','m',';','R','L']: R
    'z': {write: ' ', R: goToColonCopyDAndMoveZ}
    ' ': {write: 'z', R: goToColonCopyD}
  goToColonCopyD:
    ['D','C','A','h',' ','y','m',';','R','L']: R
    ':': {R: goToSpaceCopyD}
  goToSpaceCopyD:
    ':': R
    ' ': {R: copyD}
  goToColonCopyCAndMoveZ:
    ['D','C','A','h','y','m',';','R','L']: R
    'z': {write: ' ', R: goToColonCopyCAndMoveZ}
    ' ': {write: 'z', R: goToColonCopyC}
  goToColonCopyC:
    ['D','C','A','h',' ','y','m',';','R','L']: R
    ':': {R: goToSpaceCopyC}
  goToSpaceCopyC:
    ':': R
    ' ': {R: copyC}
  clearZMoveR:
    ['D','C','A','h',' ','y','m',';','R','L']: R
    'z': {write: ' ', R: clearZMoveR}
    ':': {R: clearHMoveR}
  clearZMoveL:
    ['D','C','A','h',' ','y','m',';','R','L']: R
    'z': {write: ' ', R: clearZMoveL}
    ':': {R: clearHMoveL}
  clearHMoveR:
    ['C','A','h',':',' ','y','m',';','R','L']: R
    'D': {write: 'R', R: clearH}
  clearHMoveL:
    ['C','A','h',':',' ','y','m',';','R','L']: R
    'D': {write: 'L', R: clearH}
  clearH:
    ['C','D','A',':',' ','y','m',';','R','L']: R
    'h': {write: 'm', R: clearUntilD2}
  clearUntilD2:
    'D': {write: 'm', R: clearUntilD}
  clearUntilD:
    [' ','C','y']: {write: 'm', R: clearUntilD}
    'D': {write: 'm', R: copyDWithH}
  copyDWithH:
    [' ','C','D','h','y','A','m']: R
    ':': copyDWithHFindSpot
  copyDWithHFindSpot:
    [':','D','C','A','h','y']: R
    ' ': {R: copyDWithHFindSpotPostSpace}
  copyDWithHFindSpotPostSpace:
    [':','D','C','A','h']: {R: copyDWithHFindSpot}
    ' ': {write: 'D', L: hThenCopy}
  hThenCopy:
    ['A',' ','C']: L
    'D': {L: realHThenCopy}
  realHThenCopy:
    ' ': {write: 'h', L: getNextToCopy}
  getDir:
    ['A','m',' ']: L
    'R': {R: bringHRight}
    'L': {R: bringHLeft}
  bringHRight:
    ['m',' ',':','D','C','A']: R
    'h': {write: ' ', R: bringHRight2}
  bringHRight2:
    'D': {R: bringHRight3}
  bringHRight3:
    'C': R
    ' ': {R: bringHRight4}
  bringHRight4:
    ' ': {write: 'h', R: writeDThenErase}
    'C': {R: bringHRight3}
    'D': {L: addHThenErase}
  writeDThenErase:
    ' ': {write: 'D', L: goColonThenErase}
  addHThenErase:
    ' ': {write: 'h', L: goColonThenErase}
  bringHLeft:
    ['m',' ',':','D','C','A']: R
    'h': {write: ' ', L: bringHLeft2}
  bringHLeft2:
    [' ','C','A']: L
    'D': {L: addHThenErase}
  goColonThenErase:
    [' ','C','A','D']: L
    ':': {L: goSpaceThenErase}
  goSpaceThenErase:
    ':': L
    ' ': {L: erase}
  erase:
    [' ','C','A','D','y','R','L','m']: {write: ' ', L: erase}
    ':': {write: ' ', L: deleteColonGoLeft}
  deleteColonGoLeft:
    ':': {write: ' ', L: deleteColonGoLeft}
    [' ','C','A','D',';','R','L']: L
    'e': {L: instrStart}
  finalEraseUntilE:
    [' ','C','A','D',';','R','L']: {write: ' ', L: finalEraseUntilE}
    'e': {write: ' ', L: finalErase2}
  finalErase2:
    'e': {write: ' ', R: finalErase2}
    [' ',':',D,A,R,L,C,h]: R
    'y': {write: ' ', L: finalErase3}
  finalErase3:
    [' ',D,A,R,L,C,h]: L
    ':': {write: ' ', R: moveToDForCompletion}
  moveToDForCompletion:
    ' ': {R: complete}